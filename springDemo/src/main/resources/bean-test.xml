<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <!--要想使用 @Autowired 需要显示的注册对应的注解的处理器到 Spring 容器，具体是需要在 bean-test.xml 里面添加,否则空指针-->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    <!--你想在 Spring 创建 ServiceA 时候就检查 serviceName 有没有被设置，你需要在 serviceName 的 set 方法上加入 @Required 注解并且需要在 XML 里面添加下面配置，它是 @Required 注解的处理器 -->
    <!--有@Required需要添加，但不加貌似也没有影响 -->
    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />

    <bean id="serviceA" class="com.dao.ServiceA">
        <property name="serviceName" value="ServiceA Name"/>
    </bean>
    <bean id="serviceB" class="com.dao.ServiceB"></bean>

    <bean id="serviceC" class="com.dao.ServiceC">
        <property name="serviceName" value="ServiceC Name"/>
    </bean>
    <!--当一个类上标注 @Component 注解时候，Spring 框架会自动注册该类的一个实例到 Spring 容器，但是我们需要告诉 Spring 框架需要到去哪里查找标注该注解的类，所以需要在 bean-test.xml 里面配置如下 -->
    <context:component-scan base-package="com.dao"/><!--  等价于context:component-scan base-package="com.dao" use-default-filters="true" -->
    <!--其中 basePackages 是注解里面 base-package 解析后的包路径列表，我们在指定base-package时候可以通过,; \t\n中其中一个分隔符指定多个包路径，比如： <context:component-scan base-package="com.jiaduo.test;com.jiaduo.test1"/>-->
    <!--当我们在 XML 里面配置 <context:component-scan/> 标签后，Spring 框架会根据标签内指定的包路径下查找指定过滤条件的 Bean，并可以根据标签内配置的 BeanNameGenerator 生成 Bean 的名称，根据标签内配置的 scope-proxy 属性配置 Bean 被代理的方式，根据子标签 <context:include-filter/>,<context:exclude-filter/> 配置自定义过滤条件。-->



</beans>